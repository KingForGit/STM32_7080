<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\ec2612.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\ec2612.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Tue Mar 19 14:39:47 2019
<BR><P>
<H3>Maximum Stack Usage =       1176 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
task_can &rArr; API_excitation &rArr; open_pwm_outup &rArr; hw_pwm_out_init &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[159]">get_volt_current_measure_result</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[159]">get_volt_current_measure_result</a><BR>
 <LI><a href="#[a6]">conf_switch_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a6]">conf_switch_mode</a><BR>
 <LI><a href="#[12d]">close_freq_collect</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12d]">close_freq_collect</a><BR>
 <LI><a href="#[172]">open_freq_collect</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[172]">open_freq_collect</a><BR>
 <LI><a href="#[157]">get_switch_status</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[157]">get_switch_status</a><BR>
 <LI><a href="#[151]">get_res_measure_result</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[151]">get_res_measure_result</a><BR>
 <LI><a href="#[14e]">get_freq_measure_result</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14e]">get_freq_measure_result</a><BR>
 <LI><a href="#[54]">can_send_pro_info</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[54]">can_send_pro_info</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[60]">API_CanTraRec</a> from task_can.o(i.API_CanTraRec) referenced from task_can.o(i.task_can)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from dev_adc.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from stm32f10x_it.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f10x_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from ops_freq_input.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from board.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from board.o(i.PVD_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from stm32f10x_it.o(i.RTCAlarm_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from stm32f10x_it.o(i.RTC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f10x_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from dev_beep.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from ops_soft_time.o(i.TIM6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from ops_freq_input.o(i.TIM8_CC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from dev_uart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from ops_can.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from stm32f10x_it.o(i.WWDG_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[4c]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[4d]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[4b]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[51]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[4f]">beep_start_handle</a> from dev_beep.o(i.beep_start_handle) referenced from task_can.o(i.API_CanRec)
 <LI><a href="#[54]">can_send_pro_info</a> from product.o(i.can_send_pro_info) referenced from product.o(i.get_soft_library_info)
 <LI><a href="#[50]">fputc</a> from dev_uart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[4e]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[62]">keypad_send_handle</a> from task_keypad.o(i.keypad_send_handle) referenced from task_keypad.o(i.task_keypad)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[57]">os_idle_demon</a> from rtx_conf_cm.o(i.os_idle_demon) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[47]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[61]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from task_can.o(i.task_can)
 <LI><a href="#[61]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from task_monitor.o(i.task_monitor)
 <LI><a href="#[64]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from task_keypad.o(i.task_keypad)
 <LI><a href="#[64]">rt_evt_get</a> from rt_event.o(i.rt_evt_get) referenced from task_uart.o(i.task_uart)
 <LI><a href="#[63]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from task_keypad.o(i.task_keypad)
 <LI><a href="#[63]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from ops_soft_time.o(i.task_soft_time)
 <LI><a href="#[63]">rt_evt_wait</a> from rt_event.o(i.rt_evt_wait) referenced from task_uart.o(i.task_uart)
 <LI><a href="#[48]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[5f]">rt_sem_init</a> from rt_semaphore.o(i.rt_sem_init) referenced from task_can.o(i.task_can)
 <LI><a href="#[53]">rt_sem_send</a> from rt_semaphore.o(i.rt_sem_send) referenced from task_can.o(i.can_send_data)
 <LI><a href="#[52]">rt_sem_wait</a> from rt_semaphore.o(i.rt_sem_wait) referenced from task_can.o(i.can_send_data)
 <LI><a href="#[56]">rt_sys_init</a> from rt_task.o(i.rt_sys_init) referenced from main.o(i.main)
 <LI><a href="#[59]">rt_tsk_create</a> from rt_task.o(i.rt_tsk_create) referenced from main.o(i.rtx_task_init)
 <LI><a href="#[5e]">rt_tsk_delete</a> from rt_task.o(i.rt_tsk_delete) referenced from main.o(i.rtx_task_init)
 <LI><a href="#[5e]">rt_tsk_delete</a> from rt_task.o(i.rt_tsk_delete) referenced from dev_uart.o(i.uart_iap_handle)
 <LI><a href="#[55]">rtx_task_init</a> from main.o(i.rtx_task_init) referenced from main.o(i.main)
 <LI><a href="#[5c]">task_can</a> from task_can.o(i.task_can) referenced from main.o(i.rtx_task_init)
 <LI><a href="#[5a]">task_keypad</a> from task_keypad.o(i.task_keypad) referenced from main.o(i.rtx_task_init)
 <LI><a href="#[5d]">task_monitor</a> from task_monitor.o(i.task_monitor) referenced from main.o(i.rtx_task_init)
 <LI><a href="#[58]">task_soft_time</a> from ops_soft_time.o(i.task_soft_time) referenced from main.o(i.rtx_task_init)
 <LI><a href="#[5b]">task_uart</a> from task_uart.o(i.task_uart) referenced from main.o(i.rtx_task_init)
 <LI><a href="#[65]">uart_iap_timeout</a> from dev_uart.o(i.uart_iap_timeout) referenced from dev_uart.o(i.uart_iap_handle)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[19c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[66]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[19d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[19e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[19f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1a0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1a1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[187]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[18d]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[171]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a2]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[1a3]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SVC_Handler &rArr; rt_stk_check
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[125]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_create
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_read
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_data
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_msg_handler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_can_updata
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_soft_time_default_init
</UL>

<P><STRONG><a name="[1a4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_pro_info
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1a5]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScanKeyRaw
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_open
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_handler
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_value
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_open
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_data
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_can
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_mode_default_init
</UL>

<P><STRONG><a name="[1a7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[197]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_handle
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_handler
</UL>

<P><STRONG><a name="[12b]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_pro_info
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_stop
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_start
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_create
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_truns
</UL>

<P><STRONG><a name="[a1]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CanRec
</UL>

<P><STRONG><a name="[70]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_handler
</UL>

<P><STRONG><a name="[72]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[8f]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[78]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_value_verify
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_volt_current_measure_result
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_general_res
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_branch_res
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_output
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_volt_current_measure_result
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_measure_result
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CanTraRec
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_mode_default_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_general_res
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_branch_res
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_sw_collect_status
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_count
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_output
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_value
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_volt_current_measure_result
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_measure_result
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_mode_default_init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_general_res
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_branch_res
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_volt_current_collect_status
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_sw_collect_status
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_count
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_mode_default_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_output
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_output
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_value
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_volt_current_measure_result
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_switch_status
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_excitation
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_volt_current_collect_status
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_count
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_output
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CanTraRec
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_mode_default_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_count
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_value_verify
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_output
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_handler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_mode_default_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_res_collect_status
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_volt_current_collect_status
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_sw_collect_status
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_freq_collect_status
</UL>

<P><STRONG><a name="[1a8]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_value_verify
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_output
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_mode_default_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_measure_result
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_general_res
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_measure_result
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_freq_measure_result
</UL>

<P><STRONG><a name="[152]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_volt_current_measure_result
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_measure_result
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
</UL>

<P><STRONG><a name="[1a9]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1aa]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1ab]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1ac]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[71]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[4b]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[1ad]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[7c]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[85]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[84]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[67]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ae]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[8e]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[1af]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>ADC_Cmd</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_Cmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[92]"></a>ADC_DMACmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f10x_adc.o(i.ADC_DMACmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_DMACmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[93]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_GetCalibrationStatus &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[94]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_GetResetCalibrationStatus &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[95]"></a>ADC_Init</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADC_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[96]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADC_RegularChannelConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[97]"></a>ADC_ResetCalibration</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_ResetCalibration &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[98]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_SoftwareStartConvCmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[99]"></a>ADC_StartCalibration</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_StartCalibration &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[9a]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_TempSensorVrefintCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_TempSensorVrefintCmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[9b]"></a>API_CanRec</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, task_can.o(i.API_CanRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = API_CanRec &rArr; GPIO_SetBits &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_stop
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_start
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_create
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CanTraRec
</UL>

<P><STRONG><a name="[60]"></a>API_CanTraRec</STRONG> (Thumb, 524 bytes, Stack size 16 bytes, task_can.o(i.API_CanTraRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = API_CanTraRec &rArr; can_send_data &rArr; can_control &rArr; can_open &rArr; set_filter &rArr; CAN_FilterInit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_data
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CanRec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_can.o(i.task_can)
</UL>
<P><STRONG><a name="[a5]"></a>API_excitation</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, task_can.o(i.API_excitation))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = API_excitation &rArr; open_pwm_outup &rArr; hw_pwm_out_init &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_switch_mode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_pwm_output
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_can
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>CAN_DeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f10x_can.o(i.CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN_DeInit &rArr; RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_open
</UL>

<P><STRONG><a name="[ac]"></a>CAN_FilterInit</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, stm32f10x_can.o(i.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_FilterInit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter
</UL>

<P><STRONG><a name="[ad]"></a>CAN_ITConfig</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_can.o(i.CAN_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_ITConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_open
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_close
</UL>

<P><STRONG><a name="[ae]"></a>CAN_Init</STRONG> (Thumb, 546 bytes, Stack size 24 bytes, stm32f10x_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_open
</UL>

<P><STRONG><a name="[af]"></a>CAN_Receive</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, stm32f10x_can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_Receive &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_can_updata
</UL>

<P><STRONG><a name="[b0]"></a>CAN_Transmit</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, stm32f10x_can.o(i.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_Transmit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_write
</UL>

<P><STRONG><a name="[b1]"></a>DAC_Cmd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_dac.o(i.DAC_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DAC_Cmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac2_hw_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac1_hw_init
</UL>

<P><STRONG><a name="[b2]"></a>DAC_GetDataOutputValue</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f10x_dac.o(i.DAC_GetDataOutputValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DAC_GetDataOutputValue &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_get_value
</UL>

<P><STRONG><a name="[b3]"></a>DAC_Init</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, stm32f10x_dac.o(i.DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DAC_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac2_hw_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac1_hw_init
</UL>

<P><STRONG><a name="[b4]"></a>DAC_SetChannel1Data</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_dac.o(i.DAC_SetChannel1Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DAC_SetChannel1Data &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_output
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac2_hw_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac1_hw_init
</UL>

<P><STRONG><a name="[b5]"></a>DAC_SetChannel2Data</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_dac.o(i.DAC_SetChannel2Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DAC_SetChannel2Data &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_output
</UL>

<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, dev_adc.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; DMA_GetITStatus &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA1_Channel5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA_ClearITPendingBit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>DMA_Cmd</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_Cmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_mode_config
</UL>

<P><STRONG><a name="[b9]"></a>DMA_DeInit</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA_DeInit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_mode_config
</UL>

<P><STRONG><a name="[b6]"></a>DMA_GetITStatus</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, stm32f10x_dma.o(i.DMA_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_GetITStatus &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>DMA_ITConfig</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_ITConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_mode_config
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_value
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_handle
</UL>

<P><STRONG><a name="[bb]"></a>DMA_Init</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_mode_config
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, ops_freq_input.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI9_5_IRQHandler &rArr; isr_updata_freq_s
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_time_tick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_updata_freq_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI_ClearITPendingBit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_pvd_init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>EXTI_Init</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_pvd_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_init
</UL>

<P><STRONG><a name="[c0]"></a>FLASH_ClearFlag</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLASH_ClearFlag &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_update_mark
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_erase
</UL>

<P><STRONG><a name="[c1]"></a>FLASH_ErasePage</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_ErasePage &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_update_mark
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_erase
</UL>

<P><STRONG><a name="[c4]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[13f]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_update_mark
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_erase
</UL>

<P><STRONG><a name="[c3]"></a>FLASH_ProgramWord</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32f10x_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_update_mark
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_write
</UL>

<P><STRONG><a name="[13e]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_update_mark
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_erase
</UL>

<P><STRONG><a name="[c2]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[c5]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_EXTILineConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_collect_timer_init
</UL>

<P><STRONG><a name="[c6]"></a>GPIO_Init</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode
</UL>

<P><STRONG><a name="[c7]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 454 bytes, Stack size 32 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO_PinRemapConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_gpio_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_pwm_dac_out_init
</UL>

<P><STRONG><a name="[c8]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_ReadInputDataBit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_switch_status
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_monitor
</UL>

<P><STRONG><a name="[c9]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32f10x_gpio.o(i.GPIO_ReadOutputDataBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_ReadOutputDataBit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_handle
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>GPIO_ResetBits</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_ResetBits &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_gpio_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScanKeyRaw
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetA20
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_switch_output
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_freq_collect
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_measure_result
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_handle
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_switch_mode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_pwm_output
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_excitation
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CanRec
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_monitor
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_pwm_out_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_pwm_dac_out_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>GPIO_SetBits</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_SetBits &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_gpio_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScanKeyRaw
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetA20
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_switch_output
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_freq_collect
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_measure_result
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_handle
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_switch_mode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CanRec
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_monitor
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac2_hw_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac1_hw_init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>GetKeyIn</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, task_keypad.o(i.GetKeyIn))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScanKeyRaw
</UL>

<P><STRONG><a name="[ca]"></a>GetScanKeyRaw</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, task_keypad.o(i.GetScanKeyRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetScanKeyRaw &rArr; GPIO_SetBits &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyIn
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_scan_Handler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, board.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16c]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[16b]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_feed
</UL>

<P><STRONG><a name="[cd]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f10x_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IWDG_SetPrescaler &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[ce]"></a>IWDG_SetReload</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IWDG_SetReload &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[cf]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IWDG_WriteAccessCmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[d0]"></a>Keypad_scan_Handler</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, task_keypad.o(i.Keypad_scan_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Keypad_scan_Handler &rArr; GetScanKeyRaw &rArr; GPIO_SetBits &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetScanKeyRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keypad_send_handle
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>NVIC_Configuration</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NVIC_Configuration &rArr; NVIC_SetVectorTable &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_board_init
</UL>

<P><STRONG><a name="[d3]"></a>NVIC_Init</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NVIC_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_pvd_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_nvic_init
</UL>

<P><STRONG><a name="[d4]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_PriorityGroupConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_board_init
</UL>

<P><STRONG><a name="[d2]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NVIC_SetVectorTable &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, board.o(i.PVD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PVD_IRQHandler &rArr; PWR_GetFlagStatus &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_GetFlagStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_feed
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f10x_pwr.o(i.PWR_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWR_GetFlagStatus &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>PWR_PVDCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_pwr.o(i.PWR_PVDCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWR_PVDCmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_pvd_init
</UL>

<P><STRONG><a name="[d9]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_pwr.o(i.PWR_PVDLevelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWR_PVDLevelConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_pvd_init
</UL>

<P><STRONG><a name="[da]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_ADCCLKConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>

<P><STRONG><a name="[db]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_AHBPeriphClockCmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_mode_config
</UL>

<P><STRONG><a name="[dc]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time6_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time3_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_can_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_pvd_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_pwm_out_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_pwm_dac_out_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25_spi_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac2_hw_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac1_hw_init
</UL>

<P><STRONG><a name="[ab]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[dd]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_APB2PeriphClockCmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_mode_config
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_gpio_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_can_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_collect_timer_init
</UL>

<P><STRONG><a name="[de]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_APB2PeriphResetCmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[10a]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.RTCAlarm_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>ResetA20</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, task_monitor.o(i.ResetA20))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ResetA20 &rArr; GPIO_SetBits &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_monitor
</UL>

<P><STRONG><a name="[e0]"></a>SPI_Cmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_Cmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25_spi_init
</UL>

<P><STRONG><a name="[e1]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_I2S_DeInit &rArr; RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25_spi_init
</UL>

<P><STRONG><a name="[e2]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_I2S_GetFlagStatus &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_readwrite
</UL>

<P><STRONG><a name="[e3]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_I2S_ReceiveData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_readwrite
</UL>

<P><STRONG><a name="[e4]"></a>SPI_I2S_SendData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_readwrite
</UL>

<P><STRONG><a name="[e5]"></a>SPI_Init</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25_spi_init
</UL>

<P><STRONG><a name="[49]"></a>SystemInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemInit &rArr; hw_pvd_init &rArr; NVIC_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_pvd_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, dev_beep.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM3_IRQHandler &rArr; GPIO_ReadOutputDataBit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ops_soft_time.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM6_IRQHandler &rArr; isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, ops_freq_input.o(i.TIM8_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM8_CC_IRQHandler &rArr; isr_updata_freq_s
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_updata_freq_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_ARRPreloadConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time6_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time3_init
</UL>

<P><STRONG><a name="[ec]"></a>TIM_ClearFlag</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_ClearFlag &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time6_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time3_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_collect_timer_init
</UL>

<P><STRONG><a name="[ed]"></a>TIM_Cmd</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_Cmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time6_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time3_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_freq_collect
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_pwm_output
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
</UL>

<P><STRONG><a name="[ee]"></a>TIM_DeInit</STRONG> (Thumb, 536 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM_DeInit &rArr; RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time6_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time3_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_pwm_out_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_pwm_dac_out_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_collect_timer_init
</UL>

<P><STRONG><a name="[ef]"></a>TIM_ICInit</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_ICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM_ICInit &rArr; TIM_SetIC4Prescaler &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_freq_collect
</UL>

<P><STRONG><a name="[f8]"></a>TIM_ITConfig</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_ITConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time6_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time3_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_handle
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_freq_collect
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_freq_collect
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_collect_timer_init
</UL>

<P><STRONG><a name="[f9]"></a>TIM_OC1Init</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, stm32f10x_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM_OC1Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
</UL>

<P><STRONG><a name="[fa]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_OC1PreloadConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_pwm_output
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
</UL>

<P><STRONG><a name="[fb]"></a>TIM_OC2Init</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, stm32f10x_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM_OC2Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
</UL>

<P><STRONG><a name="[fc]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_OC2PreloadConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_pwm_output
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
</UL>

<P><STRONG><a name="[fd]"></a>TIM_OC3Init</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, stm32f10x_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM_OC3Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
</UL>

<P><STRONG><a name="[fe]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_OC3PreloadConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_pwm_output
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
</UL>

<P><STRONG><a name="[ff]"></a>TIM_OC4Init</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, stm32f10x_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM_OC4Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
</UL>

<P><STRONG><a name="[100]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_OC4PreloadConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_pwm_output
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
</UL>

<P><STRONG><a name="[f1]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_SetIC1Prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_SetIC1Prescaler &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[f3]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_SetIC2Prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_SetIC2Prescaler &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[f5]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_SetIC3Prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_SetIC3Prescaler &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[f7]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_SetIC4Prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_SetIC4Prescaler &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[101]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_TimeBaseInit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time6_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time3_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_collect_timer_init
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, dev_uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_ClearITPendingBit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>USART_Cmd</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_Cmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_init
</UL>

<P><STRONG><a name="[106]"></a>USART_DeInit</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_DeInit &rArr; RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_init
</UL>

<P><STRONG><a name="[107]"></a>USART_GetFlagStatus</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_GetFlagStatus &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_data_package
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[102]"></a>USART_GetITStatus</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART_GetITStatus &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[108]"></a>USART_ITConfig</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART_ITConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_open
</UL>

<P><STRONG><a name="[109]"></a>USART_Init</STRONG> (Thumb, 450 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_init
</UL>

<P><STRONG><a name="[104]"></a>USART_ReceiveData</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART_ReceiveData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>USART_SendData</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_data_package
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ops_can.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; isr_can_updata &rArr; CAN_Receive &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_can_updata
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_FAULTMASK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.WWDG_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b1]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[cc]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_get_reset_type
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stm32_mcu_id
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_lib_version
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_open
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_handle
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_volt_current_measure_result
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_status
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_handler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_product_info
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_can
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_application_info
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_res_collect_status
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_volt_current_collect_status
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_sw_collect_status
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_freq_collect_status
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_erasure
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25_read
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_erase
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1b2]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1b3]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[110]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b4]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[199]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_handler
</UL>

<P><STRONG><a name="[1b5]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1b6]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1b7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1b8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1b9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[186]"></a>_init_box</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[79]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[11c]"></a>adc_read_value</STRONG> (Thumb, 374 bytes, Stack size 48 bytes, dev_adc.o(i.adc_read_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = adc_read_value &rArr; adc_value_verify &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_value_verify
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_monitor
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_mode_default_init
</UL>

<P><STRONG><a name="[11e]"></a>adc_value_verify</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, dev_adc.o(i.adc_value_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = adc_value_verify &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_value
</UL>

<P><STRONG><a name="[19b]"></a>ascii_to_hex</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, data_tools.o(i.ascii_to_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ascii_to_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_handle
</UL>

<P><STRONG><a name="[91]"></a>assert_failed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, board.o(i.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PVDLevelConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PVDCmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_GetFlagStatus
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel2Data
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel1Data
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_GetDataOutputValue
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
</UL>

<P><STRONG><a name="[4f]"></a>beep_start_handle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dev_beep.o(i.beep_start_handle))
<BR>[Address Reference Count : 1]<UL><LI> task_can.o(i.API_CanRec)
</UL>
<P><STRONG><a name="[120]"></a>can_close</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ops_can.o(i.can_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = can_close &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_free
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_handle
</UL>

<P><STRONG><a name="[122]"></a>can_control</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ops_can.o(i.can_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = can_control &rArr; can_open &rArr; set_filter &rArr; CAN_FilterInit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_open
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_data
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_can
</UL>

<P><STRONG><a name="[124]"></a>can_msg_handler</STRONG> (Thumb, 626 bytes, Stack size 16 bytes, task_can.o(i.can_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_msg_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_can
</UL>

<P><STRONG><a name="[123]"></a>can_open</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, ops_can.o(i.can_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = can_open &rArr; set_filter &rArr; CAN_FilterInit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_get_baud_index
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_malloc
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_control
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_can
</UL>

<P><STRONG><a name="[129]"></a>can_read</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ops_can.o(i.can_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_read
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_can
</UL>

<P><STRONG><a name="[a2]"></a>can_send_data</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, task_can.o(i.can_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = can_send_data &rArr; can_control &rArr; can_open &rArr; set_filter &rArr; CAN_FilterInit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_time_tick
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_write
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_control
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_pro_info
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CanTraRec
</UL>

<P><STRONG><a name="[12c]"></a>can_status</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, ops_can.o(i.can_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = can_status &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_handler
</UL>

<P><STRONG><a name="[12a]"></a>can_write</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ops_can.o(i.can_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = can_write &rArr; CAN_Transmit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_data
</UL>

<P><STRONG><a name="[12d]"></a>close_freq_collect</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, ops_freq_input.o(i.close_freq_collect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = close_freq_collect &rArr;  close_freq_collect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_freq_collect
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_status_default_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_switch_mode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_freq_collect
</UL>

<P><STRONG><a name="[a8]"></a>close_pwm_output</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, ops_pwm_output.o(i.close_pwm_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = close_pwm_output &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_excitation
</UL>

<P><STRONG><a name="[132]"></a>conf_switch_compare_volt</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ops_io_input.o(i.conf_switch_compare_volt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = conf_switch_compare_volt &rArr; dac_set_output &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_output
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_monitor
</UL>

<P><STRONG><a name="[a6]"></a>conf_switch_mode</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, ops_io_input.o(i.conf_switch_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = conf_switch_mode &rArr;  conf_switch_mode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_switch_mode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_freq_collect
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_switch_mode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_excitation
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_monitor
</UL>

<P><STRONG><a name="[134]"></a>count_branch_res</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ops_resistan.o(i.count_branch_res))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = count_branch_res &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_measure_result
</UL>

<P><STRONG><a name="[135]"></a>count_general_res</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ops_resistan.o(i.count_general_res))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = count_general_res &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_measure_result
</UL>

<P><STRONG><a name="[137]"></a>dac1_hw_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, dev_dac.o(i.dac1_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dac1_hw_init &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel1Data
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_dac_init
</UL>

<P><STRONG><a name="[138]"></a>dac2_hw_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, dev_dac.o(i.dac2_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dac2_hw_init &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel1Data
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_dac_init
</UL>

<P><STRONG><a name="[139]"></a>dac_get_value</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dev_dac.o(i.dac_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dac_get_value &rArr; DAC_GetDataOutputValue &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_GetDataOutputValue
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_switch_status
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_handler
</UL>

<P><STRONG><a name="[133]"></a>dac_set_output</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, dev_dac.o(i.dac_set_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dac_set_output &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel2Data
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel1Data
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_switch_compare_volt
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_freq_collect
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_mode_default_init
</UL>

<P><STRONG><a name="[d7]"></a>delay_ms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ops_soft_time.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetA20
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_handle
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_mode_default_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_board_init
</UL>

<P><STRONG><a name="[13a]"></a>delay_us</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ops_soft_time.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[121]"></a>dev_free</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, dev_memory.o(i.dev_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dev_free
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_close
</UL>

<P><STRONG><a name="[128]"></a>dev_malloc</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, dev_memory.o(i.dev_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dev_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_open
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_handle
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_open
</UL>

<P><STRONG><a name="[11a]"></a>dev_nvic_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, board.o(i.dev_nvic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dev_nvic_init &rArr; NVIC_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_mode_config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time6_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time3_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_can_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_open
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_collect_timer_init
</UL>

<P><STRONG><a name="[13c]"></a>flash_area_erase</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, system_iap.o(i.flash_area_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_area_erase &rArr; FLASH_ErasePage &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_feed
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_FAULTMASK
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_handle
</UL>

<P><STRONG><a name="[140]"></a>flash_area_write</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, system_iap.o(i.flash_area_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = flash_area_write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_feed
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_FAULTMASK
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_handle
</UL>

<P><STRONG><a name="[141]"></a>flash_update_mark</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, system_iap.o(i.flash_update_mark))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_update_mark &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_handle
</UL>

<P><STRONG><a name="[142]"></a>fm25_read</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, dev_fm25clxx.o(i.fm25_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fm25_read &rArr; spi_readwrite &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_readwrite
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25_lock
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_storage_read
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_read
</UL>

<P><STRONG><a name="[146]"></a>fm25_spi_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, dev_fm25clxx.o(i.fm25_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fm25_spi_init &rArr; open_wp &rArr; fm25_write_status &rArr; fm25_read_status &rArr; spi_readwrite &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_wp
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_open
</UL>

<P><STRONG><a name="[148]"></a>fm_erasure</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, dev_fm25clxx.o(i.fm_erasure))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fm_erasure &rArr; open_wp &rArr; fm25_write_status &rArr; fm25_read_status &rArr; spi_readwrite &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_readwrite
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_wp
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25_lock
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_wp
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_format
</UL>

<P><STRONG><a name="[50]"></a>fputc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dev_uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fputc &rArr; USART_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[14a]"></a>freq_count</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, ops_freq_input.o(i.freq_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = freq_count &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_time_tick
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_freq_measure_result
</UL>

<P><STRONG><a name="[14e]"></a>get_freq_measure_result</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ops_freq_input.o(i.get_freq_measure_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = get_freq_measure_result &rArr;  get_freq_measure_result (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_freq_measure_result
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_count
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_freq_collect_status
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_freq_measure_result
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_handler
</UL>

<P><STRONG><a name="[bc]"></a>get_hw_time_tick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ops_soft_time.o(i.get_hw_time_tick))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_handle
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_data
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_count
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_updata_freq_s
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_status_default_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_timeout
</UL>

<P><STRONG><a name="[151]"></a>get_res_measure_result</STRONG> (Thumb, 534 bytes, Stack size 32 bytes, ops_resistan.o(i.get_res_measure_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + In Cycle
<LI>Call Chain = get_res_measure_result &rArr;  get_res_measure_result (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_measure_result
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_general_res
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_branch_res
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_res_collect_status
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_measure_result
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_handler
</UL>

<P><STRONG><a name="[154]"></a>get_soft_library_info</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, product.o(i.get_soft_library_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_soft_library_info &rArr; pro_storage_read &rArr; fm25_read &rArr; spi_readwrite &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_storage_read
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_create
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtx_task_init
</UL>

<P><STRONG><a name="[156]"></a>get_stm32_mcu_id</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, board.o(i.get_stm32_mcu_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_stm32_mcu_id &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_board_init
</UL>

<P><STRONG><a name="[157]"></a>get_switch_status</STRONG> (Thumb, 928 bytes, Stack size 16 bytes, ops_io_input.o(i.get_switch_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = get_switch_status &rArr;  get_switch_status (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_switch_status
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_get_value
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_sw_collect_status
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_switch_status
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_handler
</UL>

<P><STRONG><a name="[159]"></a>get_volt_current_measure_result</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, ops_volt_current..o(i.get_volt_current_measure_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = get_volt_current_measure_result &rArr;  get_volt_current_measure_result (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_volt_current_measure_result
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_volt_current_collect_status
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_volt_current_measure_result
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_handler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_monitor
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_mode_default_init
</UL>

<P><STRONG><a name="[12f]"></a>gpio_exti_init</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, dev_gpio.o(i.gpio_exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gpio_exti_init &rArr; EXTI_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_freq_collect
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_freq_collect
</UL>

<P><STRONG><a name="[a9]"></a>gpio_set_mode</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, dev_gpio.o(i.gpio_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_gpio_config
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_gpio_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_can_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_pwm_output
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_excitation
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_pwm_out_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_pwm_dac_out_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_collect_timer_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_close
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac2_hw_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac1_hw_init
</UL>

<P><STRONG><a name="[15b]"></a>hw_adc_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dev_adc.o(i.hw_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hw_adc_init &rArr; adc1_dma_mode_config &rArr; dev_nvic_init &rArr; NVIC_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_gpio_config
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_dma_mode_config
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_config
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_board_init
</UL>

<P><STRONG><a name="[15c]"></a>hw_board_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, board.o(i.hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = hw_board_init &rArr; pwm_dac_init &rArr; open_pwm_dac_outup &rArr; hw_pwm_dac_out_init &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_open
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_uart_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time6_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time3_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_gpio_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_dac_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_can_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_adc_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_get_reset_type
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stm32_mcu_id
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_lib_version
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_dac_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[165]"></a>hw_can_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ops_can.o(i.hw_can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hw_can_init &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_nvic_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_board_init
</UL>

<P><STRONG><a name="[163]"></a>hw_dac_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dev_dac.o(i.hw_dac_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hw_dac_init &rArr; dac2_hw_init &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac2_hw_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac1_hw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_board_init
</UL>

<P><STRONG><a name="[15d]"></a>hw_gpio_init</STRONG> (Thumb, 894 bytes, Stack size 8 bytes, dev_gpio.o(i.hw_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hw_gpio_init &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_board_init
</UL>

<P><STRONG><a name="[e9]"></a>hw_pvd_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, board.o(i.hw_pvd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hw_pvd_init &rArr; NVIC_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PVDLevelConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PVDCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[167]"></a>hw_pwm_dac_out_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ops_pwm_output.o(i.hw_pwm_dac_out_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hw_pwm_dac_out_init &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
</UL>

<P><STRONG><a name="[168]"></a>hw_pwm_out_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ops_pwm_output.o(i.hw_pwm_out_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hw_pwm_out_init &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
</UL>

<P><STRONG><a name="[162]"></a>hw_time3_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, dev_beep.o(i.hw_time3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hw_time3_init &rArr; dev_nvic_init &rArr; NVIC_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_nvic_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_board_init
</UL>

<P><STRONG><a name="[161]"></a>hw_time6_init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ops_soft_time.o(i.hw_time6_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hw_time6_init &rArr; dev_nvic_init &rArr; NVIC_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_nvic_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_board_init
</UL>

<P><STRONG><a name="[15e]"></a>hw_uart_init</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, dev_uart.o(i.hw_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hw_uart_init &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_board_init
</UL>

<P><STRONG><a name="[ea]"></a>isr_evt_set</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rt_event.o(i.isr_evt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isr_evt_set &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>iwdg_feed</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, board.o(i.iwdg_feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iwdg_feed
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_monitor
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_erase
</UL>

<P><STRONG><a name="[e8]"></a>iwdg_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, board.o(i.iwdg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iwdg_init &rArr; IWDG_WriteAccessCmd &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[16d]"></a>led_handle</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, task_monitor.o(i.led_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = led_handle &rArr; GPIO_ReadOutputDataBit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_monitor
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_can
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = main &rArr; switch_mode_default_init &rArr; adc_read_value &rArr; adc_value_verify &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_mode_default_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_application_info
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_env
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_board_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_FAULTMASK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[172]"></a>open_freq_collect</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, ops_freq_input.o(i.open_freq_collect))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = open_freq_collect &rArr;  open_freq_collect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_output
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_freq_collect
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_status_default_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_collect_timer_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_freq_collect
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_handler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_monitor
</UL>

<P><STRONG><a name="[173]"></a>open_pwm_dac_outup</STRONG> (Thumb, 430 bytes, Stack size 64 bytes, ops_pwm_output.o(i.open_pwm_dac_outup))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = open_pwm_dac_outup &rArr; hw_pwm_dac_out_init &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_pwm_dac_out_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_dac_init
</UL>

<P><STRONG><a name="[a7]"></a>open_pwm_outup</STRONG> (Thumb, 426 bytes, Stack size 64 bytes, ops_pwm_output.o(i.open_pwm_outup))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = open_pwm_outup &rArr; hw_pwm_out_init &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_pwm_out_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_handler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_excitation
</UL>

<P><STRONG><a name="[184]"></a>os_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_error))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>

<P><STRONG><a name="[57]"></a>os_idle_demon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_idle_demon))
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[189]"></a>os_tick_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[6c]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_irqack), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[18b]"></a>os_tmr_call</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_tmr_call))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
</UL>

<P><STRONG><a name="[155]"></a>pro_storage_read</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ops_storage.o(i.pro_storage_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pro_storage_read &rArr; fm25_read &rArr; spi_readwrite &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25_read
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_soft_library_info
</UL>

<P><STRONG><a name="[164]"></a>pwm_dac_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ops_pwm_output.o(i.pwm_dac_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pwm_dac_init &rArr; open_pwm_dac_outup &rArr; hw_pwm_dac_out_init &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_dac_outup
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_monitor
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_board_init
</UL>

<P><STRONG><a name="[170]"></a>read_application_info</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, task_monitor.o(i.read_application_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = read_application_info &rArr; storage_read &rArr; fm25_read &rArr; spi_readwrite &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_read
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>rt_alloc_box</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[176]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>

<P><STRONG><a name="[17a]"></a>rt_chk_robin</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rt_robin.o(i.rt_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[17c]"></a>rt_dec_dly</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, rt_list.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[17d]"></a>rt_dispatch</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[61]"></a>rt_dly_wait</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 2]<UL><LI> task_can.o(i.task_can)
<LI> task_monitor.o(i.task_monitor)
</UL>
<P><STRONG><a name="[64]"></a>rt_evt_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_event.o(i.rt_evt_get))
<BR>[Address Reference Count : 2]<UL><LI> task_keypad.o(i.task_keypad)
<LI> task_uart.o(i.task_uart)
</UL>
<P><STRONG><a name="[17f]"></a>rt_evt_psh</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rt_event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_evt_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[63]"></a>rt_evt_wait</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, rt_event.o(i.rt_evt_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 3]<UL><LI> task_keypad.o(i.task_keypad)
<LI> ops_soft_time.o(i.task_soft_time)
<LI> task_uart.o(i.task_uart)
</UL>
<P><STRONG><a name="[48]"></a>rt_free_box</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[178]"></a>rt_get_first</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[188]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_robin.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[182]"></a>rt_init_stack</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hal_cm3.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[183]"></a>rt_mbx_psh</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[69]"></a>rt_pop_req</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_pop_req &rArr; rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[16a]"></a>rt_psh_req</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[169]"></a>rt_psq_enq</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
</UL>

<P><STRONG><a name="[177]"></a>rt_put_dly</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[17b]"></a>rt_put_prio</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[17e]"></a>rt_put_rdy_first</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[180]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[18e]"></a>rt_rmv_list</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[5f]"></a>rt_sem_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_semaphore.o(i.rt_sem_init))
<BR>[Address Reference Count : 1]<UL><LI> task_can.o(i.task_can)
</UL>
<P><STRONG><a name="[185]"></a>rt_sem_psh</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rt_semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[53]"></a>rt_sem_send</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_semaphore.o(i.rt_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_can.o(i.can_send_data)
</UL>
<P><STRONG><a name="[52]"></a>rt_sem_wait</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rt_semaphore.o(i.rt_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_can.o(i.can_send_data)
</UL>
<P><STRONG><a name="[68]"></a>rt_stk_check</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_system.o(i.rt_stk_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_stk_check
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[179]"></a>rt_switch_req</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[56]"></a>rt_sys_init</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_sys_init &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_PSP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[6a]"></a>rt_systick</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_systick &rArr; rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[18a]"></a>rt_tmr_tick</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rt_timer.o(i.rt_tmr_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_tmr_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_call
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[59]"></a>rt_tsk_create</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_TID
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.rtx_task_init)
</UL>
<P><STRONG><a name="[5e]"></a>rt_tsk_delete</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.rtx_task_init)
<LI> dev_uart.o(i.uart_iap_handle)
</UL>
<P><STRONG><a name="[55]"></a>rtx_task_init</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, main.o(i.rtx_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rtx_task_init &rArr; get_soft_library_info &rArr; pro_storage_read &rArr; fm25_read &rArr; spi_readwrite &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_product_info
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_soft_library_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[190]"></a>set_switch_output</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ops_io_output.o(i.set_switch_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_switch_output &rArr; GPIO_SetBits &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_handler
</UL>

<P><STRONG><a name="[9e]"></a>soft_time_create</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ops_soft_time.o(i.soft_time_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = soft_time_create
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_handle
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CanRec
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_keypad
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_can
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_soft_library_info
</UL>

<P><STRONG><a name="[9f]"></a>soft_time_start</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ops_soft_time.o(i.soft_time_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = soft_time_start
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_handle
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CanRec
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_keypad
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_can
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_timeout
</UL>

<P><STRONG><a name="[a0]"></a>soft_time_stop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ops_soft_time.o(i.soft_time_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = soft_time_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_pro_info
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CanRec
</UL>

<P><STRONG><a name="[193]"></a>storage_format</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ops_storage.o(i.storage_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = storage_format &rArr; fm_erasure &rArr; open_wp &rArr; fm25_write_status &rArr; fm25_read_status &rArr; spi_readwrite &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_erasure
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_handler
</UL>

<P><STRONG><a name="[166]"></a>storage_open</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ops_storage.o(i.storage_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = storage_open &rArr; fm25_spi_init &rArr; open_wp &rArr; fm25_write_status &rArr; fm25_read_status &rArr; spi_readwrite &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25_spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_board_init
</UL>

<P><STRONG><a name="[175]"></a>storage_read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ops_storage.o(i.storage_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = storage_read &rArr; fm25_read &rArr; spi_readwrite &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25_read
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_application_info
</UL>

<P><STRONG><a name="[14c]"></a>sum_16bit_verify</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, data_tools.o(i.sum_16bit_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sum_16bit_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keypad_send_handle
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_handle
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bin_file
</UL>

<P><STRONG><a name="[16f]"></a>switch_mode_default_init</STRONG> (Thumb, 146 bytes, Stack size 96 bytes, board.o(i.switch_mode_default_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = switch_mode_default_init &rArr; adc_read_value &rArr; adc_value_verify &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_set_output
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_value
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_volt_current_measure_result
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[160]"></a>sys_get_reset_type</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, board.o(i.sys_get_reset_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sys_get_reset_type &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_board_init
</UL>

<P><STRONG><a name="[5c]"></a>task_can</STRONG> (Thumb, 178 bytes, Stack size 1008 bytes, task_can.o(i.task_can))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = task_can &rArr; API_excitation &rArr; open_pwm_outup &rArr; hw_pwm_out_init &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_start
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_create
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_handle
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_open
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_control
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_msg_handler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_excitation
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.rtx_task_init)
</UL>
<P><STRONG><a name="[5a]"></a>task_keypad</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, task_keypad.o(i.task_keypad))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = task_keypad &rArr; soft_time_create
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_key_handler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_start
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.rtx_task_init)
</UL>
<P><STRONG><a name="[5d]"></a>task_monitor</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, task_monitor.o(i.task_monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = task_monitor &rArr; pwm_dac_init &rArr; open_pwm_dac_outup &rArr; hw_pwm_dac_out_init &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_dac_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_feed
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_switch_compare_volt
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_value
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetA20
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_freq_collect
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_volt_current_measure_result
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_handle
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_switch_mode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.rtx_task_init)
</UL>
<P><STRONG><a name="[58]"></a>task_soft_time</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ops_soft_time.o(i.task_soft_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = task_soft_time &rArr; soft_time_list_init &rArr; _soft_time_default_init
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_truns
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_list_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.rtx_task_init)
</UL>
<P><STRONG><a name="[5b]"></a>task_uart</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, task_uart.o(i.task_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = task_uart &rArr; uart_cmd_handler &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_open
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.rtx_task_init)
</UL>
<P><STRONG><a name="[198]"></a>uart_iap_handle</STRONG> (Thumb, 542 bytes, Stack size 40 bytes, dev_uart.o(i.uart_iap_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = uart_iap_handle &rArr; can_close &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_16bit_verify
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_start
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_create
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_time_tick
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_update_mark
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_erase
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_malloc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_close
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii_to_hex
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bin_file
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_cmd_handler
</UL>

<P><STRONG><a name="[195]"></a>uart_open</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, dev_uart.o(i.uart_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uart_open &rArr; dev_nvic_init &rArr; NVIC_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_nvic_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_malloc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_uart
</UL>

<P><STRONG><a name="[14d]"></a>uart_send_data_package</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, dev_uart.o(i.uart_send_data_package))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart_send_data_package &rArr; USART_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keypad_send_handle
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bin_file
</UL>

<P><STRONG><a name="[18f]"></a>view_product_info</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, product.o(i.view_product_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = view_product_info &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtx_task_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[16e]"></a>__set_FAULTMASK</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.__set_FAULTMASK))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[196]"></a>uart_cmd_handler</STRONG> (Thumb, 680 bytes, Stack size 664 bytes, task_uart.o(i.uart_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = uart_cmd_handler &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_handle
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_format
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_switch_output
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_freq_collect
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_volt_current_measure_result
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_switch_status
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_measure_result
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_freq_measure_result
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_get_value
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_status
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_pwm_outup
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_uart
</UL>

<P><STRONG><a name="[54]"></a>can_send_pro_info</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, product.o(i.can_send_pro_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + In Cycle
<LI>Call Chain = can_send_pro_info &rArr;  can_send_pro_info (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_pro_info
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_stop
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_data
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_send_pro_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> product.o(i.get_soft_library_info)
</UL>
<P><STRONG><a name="[62]"></a>keypad_send_handle</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, task_keypad.o(i.keypad_send_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = keypad_send_handle &rArr; Keypad_scan_Handler &rArr; GetScanKeyRaw &rArr; GPIO_SetBits &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_data_package
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_16bit_verify
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_scan_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_keypad.o(i.task_keypad)
</UL>
<P><STRONG><a name="[194]"></a>uart_key_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, task_keypad.o(i.uart_key_handler))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_keypad
</UL>

<P><STRONG><a name="[15f]"></a>show_lib_version</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board.o(i.show_lib_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = show_lib_version &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_board_init
</UL>

<P><STRONG><a name="[118]"></a>adc1_config</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, dev_adc.o(i.adc1_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = adc1_config &rArr; ADC_RegularChannelConfig &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_adc_init
</UL>

<P><STRONG><a name="[119]"></a>adc1_dma_mode_config</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, dev_adc.o(i.adc1_dma_mode_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = adc1_dma_mode_config &rArr; dev_nvic_init &rArr; NVIC_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_nvic_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_adc_init
</UL>

<P><STRONG><a name="[11b]"></a>adc1_gpio_config</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dev_adc.o(i.adc1_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = adc1_gpio_config &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_adc_init
</UL>

<P><STRONG><a name="[19a]"></a>NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dev_uart.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_handle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_timeout
</UL>

<P><STRONG><a name="[14b]"></a>get_bin_file</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, dev_uart.o(i.get_bin_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_bin_file &rArr; uart_send_data_package &rArr; USART_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_data_package
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_16bit_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_iap_handle
</UL>

<P><STRONG><a name="[65]"></a>uart_iap_timeout</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dev_uart.o(i.uart_iap_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_iap_timeout &rArr; soft_time_start
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_start
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_time_tick
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.uart_iap_handle)
</UL>
<P><STRONG><a name="[130]"></a>close_wp</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dev_fm25clxx.o(i.close_wp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = close_wp &rArr; fm25_write_status &rArr; fm25_read_status &rArr; spi_readwrite &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25_write_status
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_erasure
</UL>

<P><STRONG><a name="[143]"></a>fm25_lock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dev_fm25clxx.o(i.fm25_lock))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_erasure
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25_read
</UL>

<P><STRONG><a name="[145]"></a>fm25_read_status</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dev_fm25clxx.o(i.fm25_read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fm25_read_status &rArr; spi_readwrite &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_readwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25_write_status
</UL>

<P><STRONG><a name="[131]"></a>fm25_write_status</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dev_fm25clxx.o(i.fm25_write_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fm25_write_status &rArr; fm25_read_status &rArr; spi_readwrite &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_readwrite
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_wp
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_wp
</UL>

<P><STRONG><a name="[147]"></a>open_wp</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dev_fm25clxx.o(i.open_wp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = open_wp &rArr; fm25_write_status &rArr; fm25_read_status &rArr; spi_readwrite &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25_write_status
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_erasure
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25_spi_init
</UL>

<P><STRONG><a name="[144]"></a>spi_readwrite</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, dev_fm25clxx.o(i.spi_readwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spi_readwrite &rArr; SPI_I2S_SendData &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_erasure
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25_read
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25_write_status
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm25_read_status
</UL>

<P><STRONG><a name="[10c]"></a>__set_FAULTMASK</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ops_can.o(i.__set_FAULTMASK))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>bxcan_get_baud_index</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, ops_can.o(i.bxcan_get_baud_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bxcan_get_baud_index
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_open
</UL>

<P><STRONG><a name="[10d]"></a>isr_can_updata</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ops_can.o(i.isr_can_updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = isr_can_updata &rArr; CAN_Receive &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>set_filter</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ops_can.o(i.set_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = set_filter &rArr; CAN_FilterInit &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_open
</UL>

<P><STRONG><a name="[149]"></a>freq_collect_timer_init</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, ops_freq_input.o(i.freq_collect_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = freq_collect_timer_init &rArr; gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_nvic_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_freq_collect
</UL>

<P><STRONG><a name="[12e]"></a>freq_status_default_init</STRONG> (Thumb, 446 bytes, Stack size 8 bytes, ops_freq_input.o(i.freq_status_default_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = freq_status_default_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_time_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_freq_collect
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_freq_collect
</UL>

<P><STRONG><a name="[bd]"></a>isr_updata_freq_s</STRONG> (Thumb, 870 bytes, Stack size 32 bytes, ops_freq_input.o(i.isr_updata_freq_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = isr_updata_freq_s
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hw_time_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>printf_freq_collect_status</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ops_freq_input.o(i.printf_freq_collect_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = printf_freq_collect_status &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_freq_measure_result
</UL>

<P><STRONG><a name="[158]"></a>printf_sw_collect_status</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ops_io_input.o(i.printf_sw_collect_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = printf_sw_collect_status &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_switch_status
</UL>

<P><STRONG><a name="[15a]"></a>printf_volt_current_collect_status</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, ops_volt_current..o(i.printf_volt_current_collect_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = printf_volt_current_collect_status &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_volt_current_measure_result
</UL>

<P><STRONG><a name="[153]"></a>printf_res_collect_status</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, ops_resistan.o(i.printf_res_collect_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = printf_res_collect_status &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_res_measure_result
</UL>

<P><STRONG><a name="[116]"></a>_soft_time_default_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ops_soft_time.o(i._soft_time_default_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _soft_time_default_init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_time_list_init
</UL>

<P><STRONG><a name="[191]"></a>soft_time_list_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ops_soft_time.o(i.soft_time_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = soft_time_list_init &rArr; _soft_time_default_init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_soft_time_default_init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_soft_time
</UL>

<P><STRONG><a name="[192]"></a>soft_time_truns</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, ops_soft_time.o(i.soft_time_truns))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = soft_time_truns
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_soft_time
</UL>

<P><STRONG><a name="[13d]"></a>__set_FAULTMASK</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, system_iap.o(i.__set_FAULTMASK))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_area_erase
</UL>

<P><STRONG><a name="[13b]"></a>dev_mem_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dev_memory.o(i.dev_mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_malloc
</UL>

<P><STRONG><a name="[f0]"></a>TI1_Config</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f10x_tim.o(i.TI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[f2]"></a>TI2_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(i.TI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[f4]"></a>TI3_Config</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, stm32f10x_tim.o(i.TI3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[f6]"></a>TI4_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(i.TI4_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[e6]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e7]"></a>SetSysClockTo72</STRONG> (Thumb, 354 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[18c]"></a>rt_get_TID</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_task.o(i.rt_get_TID))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[181]"></a>rt_init_context</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[111]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10f]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[114]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[113]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[51]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[74]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[4d]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
